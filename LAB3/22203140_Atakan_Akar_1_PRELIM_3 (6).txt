CS224Lab No.:3Section No.: 1Name: Atakan AkarBilkent ID: 22203140Date: 22.10.20241. Generate Summary Linked List:.datasizeInput:	.asciiz	"\nEnter the size of the linked list: "productNumberInput:	.asciiz	"\nEnter the product number: "askForHowManySold:	.asciiz	"\nEnter how many sold: "stringForFirst:	.asciiz	"-->("stringForV›rgul:	.asciiz	","stringForKapanis:	.asciiz	")"bosluk:	.asciiz "\n"	.textmain:	li   $v0, 4            	la   $a0, sizeInput    	syscall           	    	li   $v0, 5         	syscall              	move $s0, $v0  #s0 da linked listin size› var    	move $a0, $s0    	jal inputForLinkedList    	move $a0,$v1    	move $s0,$a0    	jal printLinkedList    	move $a0,$s0    	jal resulList    	jal printLinkedList    	    	li   $v0, 10        	syscall      	    	resulList:		addi	$sp, $sp, -36	sw	$s7, 32($sp)	sw	$s6, 28($sp)	sw	$s5, 24($sp)	sw	$s4, 20($sp)	sw	$s3, 16($sp)	sw	$s2, 12($sp)	sw	$s1, 8($sp)	sw	$s0, 4($sp)	sw	$ra, 0($sp)		addi $s0,$zero,0 #s0 da yeni linked listin size › var	move $s1,$a0 #s1 de eski linked listin adresi var	createNode:			beq $s0,$zero,firstCreated	j notFirstfirstCreated:	li	$a0, 12	li	$v0, 9	syscall	move $s6,$v0	sw $zero,8($s6)	move $s7,$s6 #s7 hep baslang›c adresini tas›yacak	addi	$sp, $sp, -4	sw	$s7, 0($sp)		j itIsFirst notFirst:	li	$a0, 12	li	$v0, 9	syscall	sw $v0,0($s6)	move $s6,$v0 	sw $zero,8($s6)	itIsFirst:	addi $s0,$s0,1		lw $s3,4($s1)	sw $s3,4($s6)iterateInFirstLinkedList:	lw $s2,0($s1)	lw $t0,4($s1)	bne $t0,$s3,stopIteration	lw $s5,8($s6)	lw $s7,8($s1)	add $s5,$s5,$s7	sw $s5,8($s6)		beq $s2,$zero,stopCreating	move $s1,$s2		j iterateInFirstLinkedListstopIteration:	#beq $s2,$zero,stopCreating DUSUN	#move $s1,$s2	j createNodestopCreating:	lw $s7,0($sp)	addi $sp,$sp,4	move $a0,$s7	sw	$zero,0($s6)	lw	$ra, 0($sp)	lw	$s0, 4($sp)	lw	$s1, 8($sp)	lw	$s2, 12($sp)	lw	$s3, 16($sp)	lw	$s4, 20($sp)	lw	$s5, 24($sp)	lw	$s6, 28($sp)	lw	$s7, 32($sp)	addi	$sp, $sp, 36	jr	$ra			inputForLinkedList:  		addi	$sp, $sp, -36	sw	$s7, 32($sp)	sw	$s6, 28($sp)	sw	$s5, 24($sp)	sw	$s4, 20($sp)	sw	$s3, 16($sp)	sw	$s2, 12($sp)	sw	$s1, 8($sp)	sw	$s0, 4($sp)	sw	$ra, 0($sp) 		move	$s0, $a0 #s0 da art›k linked listin size › var	addi	$s1,$zero,1	blt	$s0, $s1, allDoneLast			li	$a0, 12	li	$v0, 9	syscall		addi 	$s0,$s0,-1	move	$s2, $v0	# $s2 de art›k heade point ediyor	move	$s3, $v0	# $s3 su anda heade point ediyor ancak sonradan iterator olarak kullan›lacak	li   $v0, 4            	la   $a0, productNumberInput    	syscall    #node a gelcek urun nosunu input olarak sormak için string bast›r    	    	    	li   $v0, 5         	syscall #su anda $v0 da yerleﬂtirilecek olan numaran›n de€eri var    	    	sw $v0,4($s3)    	    	li   $v0, 4            	la   $a0, askForHowManySold    	syscall    #node a gelcek urun nosunu kac tane satt›€›n› input olarak sormak için string bast›r    	    	    	li   $v0, 5         	syscall #su anda $v0 da yerleﬂtirilecek olan numaran›n kac tane satt›g› var var    	    	sw $v0,8($s3)    	addNode:   	    	beq	$s0, $zero, allDone    	addi 	$s0,$s0,-1    	li	$a0, 12 			li	$v0, 9	syscall		sw	$v0, 0($s3)	move 	$s3,$v0			li   $v0, 4            	la   $a0, productNumberInput    	syscall    #node a gelcek urun nosunu input olarak sormak için string bast›r    	    	    	li   $v0, 5         	syscall #su anda $v0 da yerleﬂtirilecek olan numaran›n de€eri var    	    	sw $v0,4($s3)    	    	li   $v0, 4            	la   $a0, askForHowManySold    	syscall    #node a gelcek urun nosunu kac tane satt›€›n› input olarak sormak için string bast›r    	    	    	li   $v0, 5         	syscall #su anda $v0 da yerleﬂtirilecek olan numaran›n kac tane satt›g› var var    	    	sw $v0,8($s3)	j addNode		allDone:    	sw $zero, 0($s3)    	move $v0,$s3    	move $v1,$s2allDoneLast:	lw	$ra, 0($sp)	lw	$s0, 4($sp)	lw	$s1, 8($sp)	lw	$s2, 12($sp)	lw	$s3, 16($sp)	lw	$s4, 20($sp)	lw	$s5, 24($sp)	lw	$s6, 28($sp)	lw	$s7, 32($sp)	addi	$sp, $sp, 36	jr	$ra		printLinkedList:	addi	$sp, $sp, -20	sw	$s3, 16($sp)	sw	$s2, 12($sp)	sw	$s1, 8($sp)	sw	$s0, 4($sp)	sw	$ra, 0($sp)		move $s0, $a0 #s0 da ilk nodun adresi var	li   $v0, 4            	la   $a0, bosluk    	syscall printTheNextNode:	beq $s0,$zero,printFinish	lw $s1,0($s0)#s1 de di€er node var	lw $s2,4($s0)#s2 de no var	lw $s3,8($s0)#s3 de kac tane sat›ld›g› var		la	$a0, stringForFirst	li	$v0, 4	syscall			move	$a0, $s2		li	$v0, 1	syscall		la	$a0, stringForV›rgul	li	$v0, 4	syscall			move	$a0, $s3		li	$v0, 1	syscall			la	$a0, stringForKapanis	li	$v0, 4	syscall			move $s0,$s1	j printTheNextNode	printFinish:	    	lw	$ra, 0($sp)	lw	$s0, 4($sp)	lw	$s1, 8($sp)	lw	$s2, 12($sp)	lw	$s3, 16($sp)	addi	$sp, $sp, 20	jr	$ra2. Register Count:.data question:	.asciiz "\nwhich register:"		.textmain:	la $a1,main	la $a2,end	la $a0, question      	li $v0, 4               	syscall       	li $v0, 5             	syscall   	   	move $a0,$v0 #s0 da art›k hangi register›n say›laca€› var    	add $s5,$s5,$s5   	   	bgt $a0,31,done   	blt $a0,0,done   	   	jal countRegisters   	   	move $a0,$v0   	li $v0,1   	syscall   	   	   	   	j main   	done:	 li $v0, 10           	 syscall   	 countRegisters:start:	addi	$sp, $sp, -36	sw	$s7, 32($sp)	sw	$s6, 28($sp)	sw	$s5, 24($sp)	sw	$ra  20($sp)	sw	$s4, 16($sp)	sw	$s3, 12($sp)	sw	$s2, 8($sp)	sw	$s1, 4($sp)	sw	$s0, 0($sp)		move $s0,$a0 #s0 istenen register› tutuy›	move $s1,$a1 #s1 baslangic maini tutuyo	move $s2,$a2 #s2 son endi sutuy› 	li $t0,1	addi $s3,$zero,0 #s3 total istenen register say›s›n› sayacak	countingLoop:	beq $s1,$s2,endCountingLoop	lw $s4,0($s1) #s4 te art›k iterator gibi addreslerde iteratre edecek	move $s5,$s4 #s5 temporary	srl $s5,$s5,26		beq $s5,$zero,rType	beq $s5,3,jType	beq $s5,2,jType	j iTyperType:	move $s5,$s4	srl $s5,$s5,11	andi $s5,$s5,31	beq $s5,$s0,increment1return1:	move $s5,$s4	srl $s5,$s5,16	andi $s5,$s5,31	beq $s5,$s0,increment2return2:	move $s5,$s4	srl $s5,$s5,21	andi $s5,$s5,31	beq $s5,$s0,increment3	return3:	j nextInstructionincrement1:	addi $s3,$s3,1	j return1increment2:	addi $s3,$s3,1	j return2increment3:	addi $s3,$s3,1	li $t0,1	j return3iType:	move $s5,$s4	srl $s5,$s5,16	andi $s5,$s5,31	beq $s5,$s0,increment1ItypereturnItype1:	move $s5,$s4	srl $s5,$s5,21	andi $s5,$s5,31	beq $s5,$s0,increment2ItypereturnItype2:	j nextInstructionincrement1Itype:	addi $s3,$s3,1	j returnItype1increment2Itype:	addi $s3,$s3,1	j returnItype2jType:	nextInstruction:	addi $s1,$s1,4	j countingLoop	endCountingLoop:	move $v0,$s3		lw	$s0, 0($sp)	lw	$s1, 4($sp)	lw	$s2, 8($sp)	lw	$s3  12($sp)	lw	$s4, 16($sp)	lw	$ra, 20($sp)	lw	$s5, 24($sp)	lw	$s6, 28($sp)	lw	$s7, 32($sp)	addi	$sp, $sp, 36	jr $raend: