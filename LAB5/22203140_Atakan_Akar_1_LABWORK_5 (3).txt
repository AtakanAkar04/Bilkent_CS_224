CS224Lab No.:5Section No.: 1Name: Atakan AkarBilkent ID: 22203140Date: 27.11.2024Code (Changed Parts):`timescale 1ns / 1psmodule PipeFtoD(    input logic[31:0] instr, PcPlus4F,    input logic EN, clk,    output logic[31:0] instrD, PcPlus4D);    always_ff @(posedge clk) begin        if (EN) begin            instrD <= instr;            PcPlus4D <= PcPlus4F;        end    endendmodulemodule PipeWtoF(    input logic[31:0] PC,    input logic EN, clk,    output logic[31:0] PCF);    always_ff @(posedge clk) begin        if (EN) begin            PCF <= PC;        end    endendmodulemodule PipeDtoE(    input logic clk, FlushE,    input logic [31:0] RD1, RD2, SignImmD,    input logic [4:0] RsD, RtD, RdD,    input logic [2:0] ALUControlD,    input logic RegWriteD, MemToRegD, MemWriteD,    input logic ALUSrcD, RegDstD,    output logic [31:0] RD1E, RD2E, SignImmE,    output logic [4:0] RsE, RtE, RdE,    output logic [2:0] ALUControlE,    output logic RegWriteE, MemToRegE, MemWriteE,    output logic ALUSrcE, RegDstE);    always_ff @(posedge clk) begin        if (FlushE) begin            ALUControlE <= 3'b0;            MemToRegE <= 1'b0;            RegWriteE <= 1'b0;            MemWriteE <= 1'b0;            SignImmE <= 32'b0;            RdE <= 5'b0;            RsE <= 5'b0;            RtE <= 5'b0;            RD1E <= 32'b0;            RD2E <= 32'b0;            RegDstE <= 1'b0;            ALUSrcE <= 1'b0;        end else begin            ALUControlE <= ALUControlD;            MemToRegE <= MemToRegD;            RegWriteE <= RegWriteD;            MemWriteE <= MemWriteD;            SignImmE <= SignImmD;            RdE <= RdD;            RsE <= RsD;            RtE <= RtD;            RD1E <= RD1;            RD2E <= RD2;            RegDstE <= RegDstD;            ALUSrcE <= ALUSrcD;        end    endendmodulemodule PipeEtoM(    input logic clk,    input logic [31:0] aluout_e, writedata_e,    input logic [4:0] writereg_e,    input logic regwrite_e, memtoreg_e, memwrite_e,    output logic [31:0] aluout_m, writedata_m,    output logic [4:0] writereg_m,    output logic regwrite_m, memtoreg_m, memwrite_m);    always_ff @(posedge clk) begin        memwrite_m <= memwrite_e;        writereg_m <= writereg_e;        aluout_m <= aluout_e;        regwrite_m <= regwrite_e;        writedata_m <= writedata_e;        memtoreg_m <= memtoreg_e;    endendmodulemodule PipeMtoW(    input logic clk,    input logic [31:0] aluout_m, readdata_m,    input logic [4:0] writereg_m,    input logic memtoreg_m, regwrite_m,    output logic [31:0] aluout_w, readdata_w,    output logic [4:0] writereg_w,    output logic memtoreg_w, regwrite_w);    always_ff @(posedge clk) begin        writereg_w <= writereg_m;        readdata_w <= readdata_m;        aluout_w <= aluout_m;        memtoreg_w <= memtoreg_m;        regwrite_w <= regwrite_m;    endendmodulemodule comparator(    input logic [31:0] RD1, RD2,    output logic EqualD);    always_comb begin        if (RD1 == RD2)            EqualD = 1;        else            EqualD = 0;    endendmodulemodule mux4to1 (    input logic [31:0] data0, data1, data2, data3,    input logic [1:0] select_line,    output logic [31:0] selected_data);    always_comb begin        case(select_line)            2'b00: selected_data = data0;            2'b01: selected_data = data1;            2'b10: selected_data = data2;            2'b11: selected_data = data3;            default: selected_data = 32'bx;        endcase    endendmodulemodule datapath(    input logic clk, reset,    input logic [2:0] ALUControlD,    input logic RegDst, ALUSrcD, MemWriteD,    input logic MemtoRegD, RegWriteD, BranchD);    logic PcSrcD, stallD, stallF, FlushE, ForwardAD, ForwardBD;    logic [31:0] instrF, instrD, PCF, PC, PcPlus4F, PcPlus4D;    logic [31:0] SignImmD, RD1, RD2;    logic [4:0] RtD, RsD, RdD;    logic [31:0] RD1E, RD2E, SignImmE, ALUOutE, WriteDataE;    logic [4:0] RsE, RtE, RdE, WriteRegE;    logic [2:0] ForwardAE, ForwardBE;    logic [31:0] ALUOutM, WriteDataM, ReadDataM;    logic [4:0] WriteRegM;    logic [31:0] ALUOutW, ReadDataW, ResultW;    logic [4:0] WriteRegW;    assign RtD = instrD[20:16];    assign RsD = instrD[25:21];    assign RdD = instrD[15:11];    assign PcPlus4F = PCF + 4;    PipeFtoD pipeFtoD(instrF, PcPlus4F, ~stallD, clk, instrD, PcPlus4D);    PipeWtoF pipeWtoF(PC, ~stallF, clk, PCF);    imem im1(PCF[7:2], instrF);    regfile rf(clk, RegWriteW, RsD, RtD, WriteRegW, ResultW, RD1, RD2);    HazardUnit hazard_unit(        .RegWriteW(RegWriteD),        .BranchD(BranchD),        .WriteRegW(WriteRegW),        .RegWriteM(RegWriteD),        .MemToRegM(MemtoRegD),        .WriteRegM(WriteRegM),        .RegWriteE(RegWriteD),        .MemToRegE(MemtoRegD),        .rsE(RsE),        .rtE(RtE),        .rsD(RsD),        .rtD(RtD),        .ForwardAE(ForwardAE),        .ForwardBE(ForwardBE),        .FlushE(FlushE),        .StallD(stallD),        .StallF(stallF),        .ForwardAD(ForwardAD),        .ForwardBD(ForwardBD)    );    signext se(instrD[15:0], SignImmD);    mux2 #(32) forwardA_mux(RD1, ALUOutM, ForwardAD, RD1);    mux2 #(32) forwardB_mux(RD2, ALUOutM, ForwardBD, RD2);    PipeDtoE pipeDtoE(clk, FlushE, RD1, RD2, SignImmD, RsD, RtD, RdD, ALUControlD,                      RegWriteD, MemtoRegD, MemWriteD, ALUSrcD, RegDst,                      RD1E, RD2E, SignImmE, RsE, RtE, RdE, ALUControlD,                      RegWriteD, MemtoRegD, MemWriteD, ALUSrcD, RegDst);    mux4to1 mux_alu_a(RD1E, ResultW, ALUOutM, 32'b0, ForwardAE, WriteDataE);    mux4to1 mux_alu_b(RD2E, ResultW, ALUOutM, 32'b0, ForwardBE, WriteDataE);    alu alu_instance(WriteDataE, SignImmE, ALUControlD, ALUOutE);    PipeEtoM pipeEtoM(clk, ALUOutE, WriteDataE, RdD, RegWriteD, MemtoRegD, MemWriteD,                      ALUOutM, WriteDataM, WriteRegM, RegWriteD, MemtoRegD, MemWriteD);  comparator comp(SrcAE, SrcBE, EqualD);    dmem data_memory(clk, MemWriteD, ALUOutM, WriteDataM, ReadDataM);    PipeMtoW pipeMtoW(clk, ALUOutM, ReadDataM, WriteRegM, MemtoRegD, RegWriteD,                      ALUOutW, ReadDataW, WriteRegW, MemtoRegD, RegWriteD);    mux2 #(32) result_mux(ReadDataW, ALUOutW, MemtoRegD, ResultW);endmodule