CS224 / Lab No: 7Sec No: 1Your Name: Atakan AkarYour ID: 22203140Date: 17.12.2024Lab Partner: Kerem Varnal›a)TRIXs register: Used for controlling the pins of the microcontroller as input or output. Pins connected to pushbuttons (Button 0 and Button 1) are as input (1).Pins connected to the motor control are as output (0).PORTx register: Used for reading the state of the pushbutton inputs. PORTBbits.RB0: Reads the state from Button 0.PORTBbits.RB1: Reads the state from Button 1.LATx register: Used to write values to the pins connected to the motor for controlling its direction.Example:LATBbits.LATB2: Controls the motor state ( to turn  ON and OFF).b)/*Attention!Configuration for push-button project :Connect RA0 (PORTA bit 0) to an LED.Connect RE0 (PORTE bit 0) to a push-button.Jumpers of PORTA are : 5V, pull-up (both to the left side).Jumpers of PORTE are : 3V3, pull-up (top one to right, other to left).*/void Wait() {    Delay_ms(1000); // Delay function for 1 second}unsigned int i;void main() {    AD1PCFG = 0xFFFF;     // Set all analog pins to digital mode    DDPCON.JTAGEN = 0;    // Disable JTAG for port access    TRISA = 0x0000;       // Set RA0 (bit 0 of PORTA) as output (LED)    TRISE = 0xFFFF;       // Set all bits of PORTE as input (push-button)    LATA = 0x0000;        // Initialize PORTA to turn off LEDs    LATE = 0x0000;        // Clear PORT E (optional)    while (1) {        if (PORTEbits.RE6 == 0) { // Check if push-button on RE0 is pressed (active low)            Wait();            LATAbits.LATA2 = 1;   // Turn on LED connected to RA0            for(i = 0; i < 1000; ++i) {            Delay_ms(1);             if(PORTEbits.RE6 == 0 && PORTEbits.RE7 == 0)                   LATAbits.LATA2 = 0;     }        }        else if (PORTEbits.RE7 == 0) { // Check if push-button on RE0 is pressed (active low)            Wait();            LATAbits.LATA1 = 1;   // Turn on LED connected to RA0            for(i = 0; i < 1000; ++i) {            Delay_ms(1);             if(PORTEbits.RE6 == 0 && PORTEbits.RE7 == 0)                   LATAbits.LATA1 = 0;     }        }else {            LATAbits.LATA2 = 0;            LATAbits.LATA1 = 0;   // Turn off LED connected to RA0        }    } }c)TRISx Register: Used to set the pins of the microcontroller as input or output.Pins connected to the seven-segment display segments are set as output.Pins controlling the digit selection are also configured as output.Example:TRISB = 0x00: Configures PORTB  output for controlling the display segments.TRISD = 0x00: Configures PORTD  output for controlling digit selection.LATx Register: Used to write values to output pins.It controls which segments of the seven-segment display are turned ON and which digit is active.Example:LATB = 0x3F: Writes the pattern for a specific digit.LATD = 0x01: Activates a specific digit.d)/*Configuration for the code below:Connect portA to J1 Port of 4 Digit Seven Segment ModuleJumpers of portA are : 5V, pull down ( top one to left, other to right )Connect portE to J2 Port of 4 Digit Seven Segment ModuleJumpers of portE are : 5V, pull down ( top one to left, other to right )*/// Hexadecimal values for digits in 7 segmentunsigned char binary_pattern[]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F}; unsigned int cur = 1; unsigned int next = 1; unsigned int temp = 0; unsigned int digit1 = 0; unsigned int digit2 = 0; unsigned int digit3 = 0; unsigned int digit4 = 0; unsigned int i; unsigned int wait;  void show() {           // Digit 1     PORTA=binary_pattern[digit1];     // Put 2 to the second digit     PORTE=0x01;                  // Open second digit     Delay_ms(1);     // Digit 2     PORTA=binary_pattern[digit2];     // Put 2 to the second digit     PORTE=0x02;                  // Open second digit     Delay_ms(1);     // Digit 3     PORTA=binary_pattern[digit3];     PORTE=0x04;     Delay_ms(1);     // Digit 4     PORTA=binary_pattern[digit4];     PORTE=0x08;     Delay_ms(1);  }void main() { AD1PCFG = 0xFFFF;      // Configure AN pins as digital I/O JTAGEN_bit = 0;        // Disable JTAG TRISA = 0x00;  //portA is output to D TRISE = 0X00;  //portE is output to AN while(1) {     digit4 = cur % 10;         digit3 = (cur / 10) % 10;     digit2 = (cur / 100) % 10;     digit1 = (cur / 1000) % 10;          temp = cur;     cur = next;     next = next + temp;          wait = next * 25;          for (i = 0; i < wait; i++) {         show();     }           }}